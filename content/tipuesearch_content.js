<<<<<<< HEAD
var tipuesearch = {"pages": [{'title': 'About', 'text': '四設計二甲 \n 成員:41023154張韋翔、41023135林政蔚、41023133林建三、41023140邱仲陞 \n 倉儲: https://github.com/mdecd2023/2a2-pj2ag9 網站: https://mdecd2023.github.io/2a2-pj2ag9/content/index.html \n cdtemplate \n https://mde.tw/pjcopsim \n', 'tags': '', 'url': 'About.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'Brython_ex2', 'text': 'This code uses the Euler method to approximate the solution to the ODE dy/dx = x - y with an initial condition of y0 = 1.0. The solution is calculated for a range of x values from 0 to 5. \n \n \n \n \n \n \n Solve ODE: \n from browser import document\n\ndef dy_dx(y, x):\n    return x - y\n\nx_start = 0\nx_end = 5\nn_points = 100\nx = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]\ny0 = 1.0\nh = x[1] - x[0]\ny = [y0]\nfor i in range(1, len(x)):\n    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))\n\n# Create a new paragraph element and set its text content to the solution\np = document.createElement(\'p\')\np.textContent = f"The solution to the ODE is: {y}"\n\n# Append the paragraph element to the body of the webpage\ndocument.body.appendChild(p) \n \n \n \n \n \n Brython environment and  Plotly.js : \n <script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n<script>// <![CDATA[\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\']});\n}\n// ]]></script>\n<p id="brython_div"></p> \n Brython programe with Plotly.js: \n from browser import document, window\n\ndef dy_dx(y, x):\n    return x - y\n\nx_start = 0\nx_end = 5\nn_points = 100\nx = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]\ny0 = 1.0\nh = x[1] - x[0]\ny = [y0]\nfor i in range(1, len(x)):\n    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))\n\n# Create a new div element to hold the plot\n#plot_div = document.createElement(\'div\')\n#plot_div.id = \'plot\'\n#document.body.appendChild(plot_div)\nplot_div = document["brython_div"]\n\n# Plot the solution using plotly.js\ndata = [{\'x\': x, \'y\': y}]\nwindow.Plotly.newPlot(\'brython_div\', data) \n This code defines a function dy_dx that represents the mass-spring-damper ordinary differential equation. The Euler method is used to solve this equation for a range of x values from 0 to 20 with initial conditions of y0 = [1.0, 0.0]. The solution is then plotted on the webpage using  plotly.js . \n \n \n \n \n This code defines a function dy_dx that represents the mass-spring-damper system with a PID controller. The gains of the PID controller are set to Kp = 10.0, Ki = 1.0, and Kd = 0.5. The Euler method is used to solve this system of equations for a range of x values from 0 to 20 with initial conditions of y0 = [0.0, 0.0, 0.0, 0.0]. The response of the system is then plotted on the webpage using  plotly.js . \n \n \n \n \n \n \n \n \n \n \n \n \n \n STL part viewer \n \n \n \n \n Using  sine-cosine algorithm  to optimize with constraints in Brython: \n <!DOCTYPE html>\n<html>\n<head>\n    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"></script>\n</head>\n<body onload="brython()">\n\n<div id="output"></div>\n\n<script type="text/python">\nfrom browser import document\nfrom random import random, uniform\nfrom math import sin, cos, pi\n\n# Define the objective function\ndef objective_function(x):\n    return x[0]**2 + x[1]**2\n\n# Define the constraint functions\ndef constraint1(x):\n    return x[0] + x[1] - 2\n\ndef constraint2(x):\n    return 1 - x[0] - x[1]\n\n# Define the penalty function\ndef penalty_function(x):\n    penalty = 0\n    if constraint1(x) > 0:\n        penalty += constraint1(x)\n    if constraint2(x) > 0:\n        penalty += constraint2(x)\n    return penalty\n\n# Define the fitness function\ndef fitness_function(x):\n    return objective_function(x) + penalty_function(x)\n\n# Define the sine cosine algorithm\ndef sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):\n    # Initialize the population\n    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]\n    population_fitness = [fitness_function(individual) for individual in population]\n\n    # Initialize the best solution\n    best_solution = population[0]\n    best_fitness = population_fitness[0]\n\n    # Main loop of the algorithm\n    for iteration in range(max_iterations):\n        # Calculate the value of a and r1\n        a = 2 - iteration * (2 / max_iterations)\n        r1 = 2 * pi * random()\n\n        # Update the population\n        for i in range(population_size):\n            # Calculate the value of r2, r3 and r4\n            r2 = 2 * random()\n            r3 = 2 * random()\n            r4 = random()\n\n            # Update the individual\n            for j in range(dimension):\n                if r4 < 0.5:\n                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])\n                else:\n                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])\n\n                # Make sure the individual is within the bounds\n                if population[i][j] < lower_bound:\n                    population[i][j] = lower_bound\n                elif population[i][j] > upper_bound:\n                    population[i][j] = upper_bound\n\n            # Calculate the fitness of the individual\n            population_fitness[i] = fitness_function(population[i])\n\n            # Update the best solution\n            if population_fitness[i] < best_fitness:\n                best_solution = population[i]\n                best_fitness = population_fitness[i]\n\n        # Print the current iteration and best fitness\n        print(f\'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}\')\n\n    return best_solution\n\n# Run the sine cosine algorithm to solve the optimization problem with constraints\nbest_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)\n\n# Print the result\noutput_div = document[\'output\']\noutput_div.text = f\'Best Solution: {best_solution}\'\n</script>\n\n<script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"></script>\n</body>\n</html> \n Plot the result by using  plotly.js : \n <!DOCTYPE html>\n<html>\n<head>\n    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"></script>\n    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>\n</head>\n<body onload="brython()">\n\n<div id="output"></div>\n<div id="plot"></div>\n\n<script type="text/python">\nfrom browser import document\nfrom random import random, uniform\nfrom math import sin, cos, pi\n\n# Define the objective function\ndef objective_function(x):\n    return x[0]**2 + x[1]**2\n\n# Define the constraint functions\ndef constraint1(x):\n    return x[0] + x[1] - 2\n\ndef constraint2(x):\n    return 1 - x[0] - x[1]\n\n# Define the penalty function\ndef penalty_function(x):\n    penalty = 0\n    if constraint1(x) > 0:\n        penalty += constraint1(x)\n    if constraint2(x) > 0:\n        penalty += constraint2(x)\n    return penalty\n\n# Define the fitness function\ndef fitness_function(x):\n    return objective_function(x) + penalty_function(x)\n\n# Define the sine cosine algorithm\ndef sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):\n    # Initialize the population\n    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]\n    population_fitness = [fitness_function(individual) for individual in population]\n\n    # Initialize the best solution\n    best_solution = population[0]\n    best_fitness = population_fitness[0]\n\n    # Main loop of the algorithm\n    for iteration in range(max_iterations):\n        # Calculate the value of a and r1\n        a = 2 - iteration * (2 / max_iterations)\n        r1 = 2 * pi * random()\n\n        # Update the population\n        for i in range(population_size):\n            # Calculate the value of r2, r3 and r4\n            r2 = 2 * random()\n            r3 = 2 * random()\n            r4 = random()\n\n            # Update the individual\n            for j in range(dimension):\n                if r4 < 0.5:\n                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])\n                else:\n                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])\n\n                # Make sure the individual is within the bounds\n                if population[i][j] < lower_bound:\n                    population[i][j] = lower_bound\n                elif population[i][j] > upper_bound:\n                    population[i][j] = upper_bound\n\n            # Calculate the fitness of the individual\n            population_fitness[i] = fitness_function(population[i])\n\n            # Update the best solution\n            if population_fitness[i] < best_fitness:\n                best_solution = population[i]\n                best_fitness = population_fitness[i]\n\n        # Print the current iteration and best fitness\n        print(f\'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}\')\n\n    return best_solution\n\n# Run the sine cosine algorithm to solve the optimization problem with constraints\nbest_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)\n\n# Print the result\noutput_div = document[\'output\']\noutput_div.text = f\'Best Solution: {best_solution}\'\n\n# Plot the result using Plotly.js\ndata = [\n    {\n        \'x\': [best_solution[0]],\n        \'y\': [best_solution[1]],\n        \'mode\': \'markers\',\n        \'marker\': {\'size\': 12},\n        \'name\': \'Best Solution\'\n    }\n]\n\nlayout = {\n    \'xaxis\': {\'range\': [-10, 10]},\n    \'yaxis\': {\'range\': [-10, 10]},\n}\n\nPlotly.newPlot(\'plot\', data, layout)\n</script>\n\n<script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"></script>\n</body>\n</html> \n \n \n \n \n \n', 'tags': '', 'url': 'Brython_ex2.html'}, {'title': 'w9', 'text': "\n 組長 zmq: \n # pip install pyzmq cbor keyboard\nfrom zmqRemoteApi import RemoteAPIClient\nimport keyboard\n\n\xa0\n\nclient = RemoteAPIClient('localhost', 23000)\n\n\xa0\n\nprint('Program started')\nsim = client.getObject('sim')\nsim.startSimulation()\nprint('Simulation started')\n\n\xa0\n\ndef setBubbleRobVelocity(leftWheelVelocity, rightWheelVelocity):\n\xa0\xa0\xa0 leftMotor = sim.getObject('/leftMotor')\n\xa0\xa0\xa0 rightMotor = sim.getObject('/rightMotor')\n\xa0\xa0\xa0 sim.setJointTargetVelocity(leftMotor, leftWheelVelocity)\n\xa0\xa0\xa0 sim.setJointTargetVelocity(rightMotor, rightWheelVelocity)\n\n\xa0\n\n'''\n# Example usage 1:\nsetBubbleRobVelocity(1.0, 1.0)\ntime.sleep(2)\nsetBubbleRobVelocity(0.0, 0.0)\n'''\n# use keyborad to move BubbleRob\n\n\xa0\n\nwhile True:\n\xa0\xa0\xa0 if keyboard.is_pressed('w'):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 setBubbleRobVelocity(1.0, 1.0)\n\xa0\xa0\xa0 elif keyboard.is_pressed('s'):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 setBubbleRobVelocity(-1.0, -1.0)\n\xa0\xa0\xa0 elif keyboard.is_pressed('a'):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 setBubbleRobVelocity(-1.0, 1.0)\n\xa0\xa0\xa0 elif keyboard.is_pressed('d'):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 setBubbleRobVelocity(1.0, -1.0)\n\xa0\xa0\xa0 elif keyboard.is_pressed('q'):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # stop simulation\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.stopSimulation()\n\xa0\xa0\xa0 else:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 setBubbleRobVelocity(0.0, 0.0) \n \n 組員將localhost改成組長電腦的ipv4位址並將防火牆關閉、將leftMotor和rightMotor的數字改成與組長coppeliasim上相對應執行即可跨電腦操作bubbleRob，四個方向鍵可依造個人喜好調整。 \n", 'tags': '', 'url': 'w9.html'}, {'title': '心得', 'text': '41023133 \n 一開始在連線的部分出了點狀況，無法順利和組長的電腦連線，後來一個一個細節開始慢慢檢查除錯，有沒有連同一個網路，有沒有改localhost，有沒有把機器人的編號與組長那一端的編號對上，全部都重新按照步驟一個一個來就可以用了。 \n 41023135 \n 41023140 \n 41023154 \n \n', 'tags': '', 'url': '心得.html'}, {'title': 'w10', 'text': '1.What is zmqRemoteAPI, and how does it relate to CoppeliaSim? \n \xa0 \n \xa0 \n Answer: zmqRemoteAPI是一種輕量級的通訊協議，能夠遠程控制機器人仿真軟體CoppeliaSim。它基於ZeroMQ消息庫，使得分布式應用程式之間的通訊更加容易。zmqRemoteAPI允許開發人員透過各種程式語言，包括Python、C++和MATLAB與CoppeliaSim互動。在啟用CoppeliaSim中的Remote API服務後，可以透過zmqRemoteAPI將Python腳本與CoppeliaSim連接起來，並控制仿真環境中的機器人模型。zmqRemoteAPI與CoppeliaSim密切相關，是CoppeliaSim的一個重要組成部分。 \n \xa0 \n 2.How do you establish a connection between a Python script and CoppeliaSim using zmqRemoteAPI? \n \xa0 \n Anwser: \n \n \n \n 使用zmqRemoteAPI建立Python腳本與CoppeliaSim之間的連線需要遵循以下步驟： \n \n \n 在CoppeliaSim場景中啟用Remote API服務。 \n \n \n 在Python腳本中匯入zmq庫。 \n \n \n 建立一個zmq Context物件和一個zmq Socket物件。 \n \n \n 使用zmq Socket物件連接到CoppeliaSim的Remote API服務，指定IP位址和埠號。 \n \n \n 傳送指令和資料到CoppeliaSim，並接收來自CoppeliaSim的回應資料。 \n \n \n \n \n \n \n 3.What are some common use cases for zmqRemoteAPI in CoppeliaSim?  Anwser: \n \n \n \n \n zmqRemoteAPI在CoppeliaSim中有許多常見的應用，例如： \n \n \n 仿真環境控制：使用zmqRemoteAPI可以控制CoppeliaSim中的機器人模型，例如移動機器人的運動、設置機器人感測器的參數等。 \n \n \n 機器人控制演算法測試：使用zmqRemoteAPI可以在CoppeliaSim中測試機器人控制演算法，例如路徑規劃演算法、避障演算法等。 \n \n \n 機器人應用程式開發：使用zmqRemoteAPI可以開發機器人應用程式，例如機器人導航、機器人視覺等。 \n \n \n 仿真資料收集：使用zmqRemoteAPI可以收集仿真資料，例如機器人感測器資料、機器人運動軌跡等。 總之，zmqRemoteAPI提供了一種方便的方式，使得開發人員可以透過各種程式語言和CoppeliaSim進行互動，從而完成各種機器人仿真和應用程式開發任務。 \n \n \n \n \n \n \n \xa0 \n 4 .What are the advantages and disadvantages of using zmqRemoteAPI compared to other methods of communication between Python and CoppeliaSim? \n \xa0 \n Answer: \n 使用zmqRemoteAPI與其他Python和CoppeliaSim通訊方法相比，具有以下優點和缺點：  優點：  跨平台支持：zmqRemoteAPI可以支持跨平台的通訊，可以使用各種編程語言與CoppeliaSim進行交互。  高效性：zmqRemoteAPI使用ZeroMQ消息庫，具有高效的消息傳輸性能，可以實現低延遲和高吞吐量的通訊。  靈活性：zmqRemoteAPI提供了靈活的API接口，可以方便地控制CoppeliaSim中的機器人模型，以及收集和處理仿真數據。  缺點：  學習成本高：zmqRemoteAPI的使用需要具備一定的編程知識和經驗，對初學者來說可能比較困難。   可擴展性差：如果需要擴展和定制zmqRemoteAPI的功能，需要對其底層的ZeroMQ庫有深入的了解。 總的來說，zmqRemoteAPI是一種高效且靈活的通訊協議，可以方便地實現Python和CoppeliaSim之間的通訊。但同時也需要注意它的學習成本和可靠性問題。 \n \n \xa0 \n 5.Can you give an example of a project or task that you could complete using zmqRemoteAPI in CoppeliaSim? \n \n \n \n 用zmqRemoteAPI在CoppeliaSim中，可以完成許多不同的項目或任務，以下是其中一個簡單的例子： 假設我們需要設計一個機器人，該機器人可以根據使用者提供的目標點路徑，在仿真環境中自主導航。為了實現這個任務，我們可以使用以下步驟： 在CoppeliaSim中創建一個包含機器人模型的場景。 在Python中使用zmqRemoteAPI建立與CoppeliaSim的連接。 在Python中編寫導航演算法，計算機器人運動路徑。 將機器人運動路徑發送給CoppeliaSim，並在仿真環境中模擬機器人的運動。 將機器人感測器數據收集並傳輸回Python中進行處理，例如計算機器人的定位誤差、路徑規劃效果等。 通過這個例子，可以看出zmqRemoteAPI可以方便地實現Python和CoppeliaSim之間的通信，幫助我們開發各種機器人應用程序和演算法。 \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'jitsi會議', 'text': '', 'tags': '', 'url': 'jitsi會議.html'}]};
=======
var tipuesearch = {"pages": [{'title': 'About', 'text': '四設計二甲 \n 成員:41023154張韋翔、41023135林政蔚、41023133林建三、41023140邱仲陞 \n 倉儲: https://github.com/mdecd2023/2a2-pj2ag9 網站: https://mdecd2023.github.io/2a2-pj2ag9/content/index.html \n cdtemplate \n https://mde.tw/pjcopsim', 'tags': '', 'url': 'About.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'Brython_ex2', 'text': 'This code uses the Euler method to approximate the solution to the ODE dy/dx = x - y with an initial condition of y0 = 1.0. The solution is calculated for a range of x values from 0 to 5. \n \n \n \n \n \n \n Solve ODE: \n from browser import document\n\ndef dy_dx(y, x):\n    return x - y\n\nx_start = 0\nx_end = 5\nn_points = 100\nx = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]\ny0 = 1.0\nh = x[1] - x[0]\ny = [y0]\nfor i in range(1, len(x)):\n    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))\n\n# Create a new paragraph element and set its text content to the solution\np = document.createElement(\'p\')\np.textContent = f"The solution to the ODE is: {y}"\n\n# Append the paragraph element to the body of the webpage\ndocument.body.appendChild(p) \n \n \n \n \n \n Brython environment and  Plotly.js : \n <script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n<script>// <![CDATA[\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\']});\n}\n// ]]></script>\n<p id="brython_div"></p> \n Brython programe with Plotly.js: \n from browser import document, window\n\ndef dy_dx(y, x):\n    return x - y\n\nx_start = 0\nx_end = 5\nn_points = 100\nx = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]\ny0 = 1.0\nh = x[1] - x[0]\ny = [y0]\nfor i in range(1, len(x)):\n    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))\n\n# Create a new div element to hold the plot\n#plot_div = document.createElement(\'div\')\n#plot_div.id = \'plot\'\n#document.body.appendChild(plot_div)\nplot_div = document["brython_div"]\n\n# Plot the solution using plotly.js\ndata = [{\'x\': x, \'y\': y}]\nwindow.Plotly.newPlot(\'brython_div\', data) \n This code defines a function dy_dx that represents the mass-spring-damper ordinary differential equation. The Euler method is used to solve this equation for a range of x values from 0 to 20 with initial conditions of y0 = [1.0, 0.0]. The solution is then plotted on the webpage using  plotly.js . \n \n \n \n \n This code defines a function dy_dx that represents the mass-spring-damper system with a PID controller. The gains of the PID controller are set to Kp = 10.0, Ki = 1.0, and Kd = 0.5. The Euler method is used to solve this system of equations for a range of x values from 0 to 20 with initial conditions of y0 = [0.0, 0.0, 0.0, 0.0]. The response of the system is then plotted on the webpage using  plotly.js . \n \n \n \n \n \n \n \n \n \n \n \n \n \n STL part viewer \n \n \n \n \n Using  sine-cosine algorithm  to optimize with constraints in Brython: \n <!DOCTYPE html>\n<html>\n<head>\n    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"></script>\n</head>\n<body onload="brython()">\n\n<div id="output"></div>\n\n<script type="text/python">\nfrom browser import document\nfrom random import random, uniform\nfrom math import sin, cos, pi\n\n# Define the objective function\ndef objective_function(x):\n    return x[0]**2 + x[1]**2\n\n# Define the constraint functions\ndef constraint1(x):\n    return x[0] + x[1] - 2\n\ndef constraint2(x):\n    return 1 - x[0] - x[1]\n\n# Define the penalty function\ndef penalty_function(x):\n    penalty = 0\n    if constraint1(x) > 0:\n        penalty += constraint1(x)\n    if constraint2(x) > 0:\n        penalty += constraint2(x)\n    return penalty\n\n# Define the fitness function\ndef fitness_function(x):\n    return objective_function(x) + penalty_function(x)\n\n# Define the sine cosine algorithm\ndef sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):\n    # Initialize the population\n    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]\n    population_fitness = [fitness_function(individual) for individual in population]\n\n    # Initialize the best solution\n    best_solution = population[0]\n    best_fitness = population_fitness[0]\n\n    # Main loop of the algorithm\n    for iteration in range(max_iterations):\n        # Calculate the value of a and r1\n        a = 2 - iteration * (2 / max_iterations)\n        r1 = 2 * pi * random()\n\n        # Update the population\n        for i in range(population_size):\n            # Calculate the value of r2, r3 and r4\n            r2 = 2 * random()\n            r3 = 2 * random()\n            r4 = random()\n\n            # Update the individual\n            for j in range(dimension):\n                if r4 < 0.5:\n                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])\n                else:\n                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])\n\n                # Make sure the individual is within the bounds\n                if population[i][j] < lower_bound:\n                    population[i][j] = lower_bound\n                elif population[i][j] > upper_bound:\n                    population[i][j] = upper_bound\n\n            # Calculate the fitness of the individual\n            population_fitness[i] = fitness_function(population[i])\n\n            # Update the best solution\n            if population_fitness[i] < best_fitness:\n                best_solution = population[i]\n                best_fitness = population_fitness[i]\n\n        # Print the current iteration and best fitness\n        print(f\'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}\')\n\n    return best_solution\n\n# Run the sine cosine algorithm to solve the optimization problem with constraints\nbest_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)\n\n# Print the result\noutput_div = document[\'output\']\noutput_div.text = f\'Best Solution: {best_solution}\'\n</script>\n\n<script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"></script>\n</body>\n</html> \n Plot the result by using  plotly.js : \n <!DOCTYPE html>\n<html>\n<head>\n    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"></script>\n    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>\n</head>\n<body onload="brython()">\n\n<div id="output"></div>\n<div id="plot"></div>\n\n<script type="text/python">\nfrom browser import document\nfrom random import random, uniform\nfrom math import sin, cos, pi\n\n# Define the objective function\ndef objective_function(x):\n    return x[0]**2 + x[1]**2\n\n# Define the constraint functions\ndef constraint1(x):\n    return x[0] + x[1] - 2\n\ndef constraint2(x):\n    return 1 - x[0] - x[1]\n\n# Define the penalty function\ndef penalty_function(x):\n    penalty = 0\n    if constraint1(x) > 0:\n        penalty += constraint1(x)\n    if constraint2(x) > 0:\n        penalty += constraint2(x)\n    return penalty\n\n# Define the fitness function\ndef fitness_function(x):\n    return objective_function(x) + penalty_function(x)\n\n# Define the sine cosine algorithm\ndef sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):\n    # Initialize the population\n    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]\n    population_fitness = [fitness_function(individual) for individual in population]\n\n    # Initialize the best solution\n    best_solution = population[0]\n    best_fitness = population_fitness[0]\n\n    # Main loop of the algorithm\n    for iteration in range(max_iterations):\n        # Calculate the value of a and r1\n        a = 2 - iteration * (2 / max_iterations)\n        r1 = 2 * pi * random()\n\n        # Update the population\n        for i in range(population_size):\n            # Calculate the value of r2, r3 and r4\n            r2 = 2 * random()\n            r3 = 2 * random()\n            r4 = random()\n\n            # Update the individual\n            for j in range(dimension):\n                if r4 < 0.5:\n                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])\n                else:\n                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])\n\n                # Make sure the individual is within the bounds\n                if population[i][j] < lower_bound:\n                    population[i][j] = lower_bound\n                elif population[i][j] > upper_bound:\n                    population[i][j] = upper_bound\n\n            # Calculate the fitness of the individual\n            population_fitness[i] = fitness_function(population[i])\n\n            # Update the best solution\n            if population_fitness[i] < best_fitness:\n                best_solution = population[i]\n                best_fitness = population_fitness[i]\n\n        # Print the current iteration and best fitness\n        print(f\'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}\')\n\n    return best_solution\n\n# Run the sine cosine algorithm to solve the optimization problem with constraints\nbest_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)\n\n# Print the result\noutput_div = document[\'output\']\noutput_div.text = f\'Best Solution: {best_solution}\'\n\n# Plot the result using Plotly.js\ndata = [\n    {\n        \'x\': [best_solution[0]],\n        \'y\': [best_solution[1]],\n        \'mode\': \'markers\',\n        \'marker\': {\'size\': 12},\n        \'name\': \'Best Solution\'\n    }\n]\n\nlayout = {\n    \'xaxis\': {\'range\': [-10, 10]},\n    \'yaxis\': {\'range\': [-10, 10]},\n}\n\nPlotly.newPlot(\'plot\', data, layout)\n</script>\n\n<script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"></script>\n</body>\n</html> \n \n \n \n \n \n', 'tags': '', 'url': 'Brython_ex2.html'}, {'title': 'w9', 'text': "\n 組長 zmq: \n # pip install pyzmq cbor keyboard\nfrom zmqRemoteApi import RemoteAPIClient\nimport keyboard\n\n\xa0\n\nclient = RemoteAPIClient('localhost', 23000)\n\n\xa0\n\nprint('Program started')\nsim = client.getObject('sim')\nsim.startSimulation()\nprint('Simulation started')\n\n\xa0\n\ndef setBubbleRobVelocity(leftWheelVelocity, rightWheelVelocity):\n\xa0\xa0\xa0 leftMotor = sim.getObject('/leftMotor')\n\xa0\xa0\xa0 rightMotor = sim.getObject('/rightMotor')\n\xa0\xa0\xa0 sim.setJointTargetVelocity(leftMotor, leftWheelVelocity)\n\xa0\xa0\xa0 sim.setJointTargetVelocity(rightMotor, rightWheelVelocity)\n\n\xa0\n\n'''\n# Example usage 1:\nsetBubbleRobVelocity(1.0, 1.0)\ntime.sleep(2)\nsetBubbleRobVelocity(0.0, 0.0)\n'''\n# use keyborad to move BubbleRob\n\n\xa0\n\nwhile True:\n\xa0\xa0\xa0 if keyboard.is_pressed('w'):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 setBubbleRobVelocity(1.0, 1.0)\n\xa0\xa0\xa0 elif keyboard.is_pressed('s'):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 setBubbleRobVelocity(-1.0, -1.0)\n\xa0\xa0\xa0 elif keyboard.is_pressed('a'):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 setBubbleRobVelocity(-1.0, 1.0)\n\xa0\xa0\xa0 elif keyboard.is_pressed('d'):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 setBubbleRobVelocity(1.0, -1.0)\n\xa0\xa0\xa0 elif keyboard.is_pressed('q'):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # stop simulation\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.stopSimulation()\n\xa0\xa0\xa0 else:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 setBubbleRobVelocity(0.0, 0.0) \n \n 組員將localhost改成組長電腦的ipv4位址並將防火牆關閉、將leftMotor和rightMotor的數字改成與組長coppeliasim上相對應執行即可跨電腦操作bubbleRob，四個方向鍵可依造個人喜好調整。 \n", 'tags': '', 'url': 'w9.html'}, {'title': '41023133', 'text': '一開始在連線的部分出了點狀況，無法順利和組長的電腦連線，後來一個一個細節開始慢慢檢查除錯，有沒有連同一個網路，有沒有改localhost，有沒有把機器人的編號與組長那一端的編號對上，全部都重新按照步驟一個一個來就可以用了。', 'tags': '', 'url': '41023133.html'}, {'title': '41023135', 'text': 'test', 'tags': '', 'url': '41023135.html'}, {'title': '41023140', 'text': '上次連線bubblerob對戰', 'tags': '', 'url': '41023140.html'}, {'title': '41023154', 'text': '', 'tags': '', 'url': '41023154.html'}, {'title': 'w10', 'text': '1.What is zmqRemoteAPI, and how does it relate to CoppeliaSim? \n \xa0 \n \xa0 \n Answer: zmqRemoteAPI是一種輕量級的通訊協議，能夠遠程控制機器人仿真軟體CoppeliaSim。它基於ZeroMQ消息庫，使得分布式應用程式之間的通訊更加容易。zmqRemoteAPI允許開發人員透過各種程式語言，包括Python、C++和MATLAB與CoppeliaSim互動。在啟用CoppeliaSim中的Remote API服務後，可以透過zmqRemoteAPI將Python腳本與CoppeliaSim連接起來，並控制仿真環境中的機器人模型。zmqRemoteAPI與CoppeliaSim密切相關，是CoppeliaSim的一個重要組成部分。 \n \xa0 \n 2.How do you establish a connection between a Python script and CoppeliaSim using zmqRemoteAPI? \n \xa0 \n Anwser: \n \n \n \n 使用zmqRemoteAPI建立Python腳本與CoppeliaSim之間的連線需要遵循以下步驟： \n \n \n 在CoppeliaSim場景中啟用Remote API服務。 \n \n \n 在Python腳本中匯入zmq庫。 \n \n \n 建立一個zmq Context物件和一個zmq Socket物件。 \n \n \n 使用zmq Socket物件連接到CoppeliaSim的Remote API服務，指定IP位址和埠號。 \n \n \n 傳送指令和資料到CoppeliaSim，並接收來自CoppeliaSim的回應資料。 \n \n \n \n \n \n \n 3.What are some common use cases for zmqRemoteAPI in CoppeliaSim?  Anwser: \n \n \n \n \n zmqRemoteAPI在CoppeliaSim中有許多常見的應用，例如： \n \n \n 仿真環境控制：使用zmqRemoteAPI可以控制CoppeliaSim中的機器人模型，例如移動機器人的運動、設置機器人感測器的參數等。 \n \n \n 機器人控制演算法測試：使用zmqRemoteAPI可以在CoppeliaSim中測試機器人控制演算法，例如路徑規劃演算法、避障演算法等。 \n \n \n 機器人應用程式開發：使用zmqRemoteAPI可以開發機器人應用程式，例如機器人導航、機器人視覺等。 \n \n \n 仿真資料收集：使用zmqRemoteAPI可以收集仿真資料，例如機器人感測器資料、機器人運動軌跡等。 總之，zmqRemoteAPI提供了一種方便的方式，使得開發人員可以透過各種程式語言和CoppeliaSim進行互動，從而完成各種機器人仿真和應用程式開發任務。 \n \n \n \n \n \n \n \xa0 \n 4 .What are the advantages and disadvantages of using zmqRemoteAPI compared to other methods of communication between Python and CoppeliaSim? \n \xa0 \n Answer: \n 使用zmqRemoteAPI與其他Python和CoppeliaSim通訊方法相比，具有以下優點和缺點：  優點：  跨平台支持：zmqRemoteAPI可以支持跨平台的通訊，可以使用各種編程語言與CoppeliaSim進行交互。  高效性：zmqRemoteAPI使用ZeroMQ消息庫，具有高效的消息傳輸性能，可以實現低延遲和高吞吐量的通訊。  靈活性：zmqRemoteAPI提供了靈活的API接口，可以方便地控制CoppeliaSim中的機器人模型，以及收集和處理仿真數據。  缺點：  學習成本高：zmqRemoteAPI的使用需要具備一定的編程知識和經驗，對初學者來說可能比較困難。   可擴展性差：如果需要擴展和定制zmqRemoteAPI的功能，需要對其底層的ZeroMQ庫有深入的了解。 總的來說，zmqRemoteAPI是一種高效且靈活的通訊協議，可以方便地實現Python和CoppeliaSim之間的通訊。但同時也需要注意它的學習成本和可靠性問題。 \n \n \xa0 \n 5.Can you give an example of a project or task that you could complete using zmqRemoteAPI in CoppeliaSim? \n \n \n \n 用zmqRemoteAPI在CoppeliaSim中，可以完成許多不同的項目或任務，以下是其中一個簡單的例子： 假設我們需要設計一個機器人，該機器人可以根據使用者提供的目標點路徑，在仿真環境中自主導航。為了實現這個任務，我們可以使用以下步驟： 在CoppeliaSim中創建一個包含機器人模型的場景。 在Python中使用zmqRemoteAPI建立與CoppeliaSim的連接。 在Python中編寫導航演算法，計算機器人運動路徑。 將機器人運動路徑發送給CoppeliaSim，並在仿真環境中模擬機器人的運動。 將機器人感測器數據收集並傳輸回Python中進行處理，例如計算機器人的定位誤差、路徑規劃效果等。 通過這個例子，可以看出zmqRemoteAPI可以方便地實現Python和CoppeliaSim之間的通信，幫助我們開發各種機器人應用程序和演算法。 \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'jitsi會議', 'text': '', 'tags': '', 'url': 'jitsi會議.html'}]};
>>>>>>> 2d4b076bec2096c1a37d9052dffe19d7822ad825
